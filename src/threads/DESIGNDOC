			+--------------------+
			| CS 140             |
			| PROJECT 1: THREADS |
			| DESIGN DOCUMENT    |
			+--------------------+
				   
---- GROUP ----

Worapol Boontanonda <agentzh2m@gmail.com> 5780431
Nattakarn Klongyut <nattakarn.kl@gmail.com> 5780130

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

we add ticks and start in thread struct (in thread.h)

we make global variable called 
	struct list *wait_list in list.c (that will keep all the sleeping thread)

we create a new function to compare the data using list_less_func
	list_less_func sleep_comp(const struct list_elem *a,const struct list_elem *b,void *aux) {
 			 }
this function is used to compare the time left when we use insert ordered which is a part of the list.c library

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

	when timer_sleep() is called, it will append the current thread into waiting queue
	and then block the thread, the interrupt handler check the waiting to list to see
	which thread is ready to be woken up if it is ready to be awoken up in that tick 
	thread_unblock is call to unblock the thread

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

	We make a waiting list which are ordered from thread that need to be awaken up first to 
	thread that need to be awaken up later (these thread are kept near the tail)
	HEAD(thread that need to be wake up first) --> TAIL (thread that need to be wake up later)
	therefore when we check for the thread that need to be woken up we don't need to check the whole
	list we just check the thread that need to be wake up only, we don't need to iterate through the whole 
	waiting list since we ordered it in that kind of way. 

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
	We append the thread into the same list (we disable interrupt to block the thread)
	therefore the critical section of the global wait list is protected since we disable the
	interrupt

>> A5: How are race conditions avoided when a timer interrupt occurs

>> we disable the interupt when we add the thread into the sleeping queue
after we finish sleeping the queue we re-enable the interrupt 


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

 int prev_priority in struct thread 

 we added prev priority to keep the previous priority number before the donation. 
 if nothing is donated, it will be -1

 we use lock struct -> wait_list to track the nested thread  

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

(waiting for L)		
H 		M 	 	L(holding the lock that H is waiting for)
|				^
|_______________| 

H donate its number to L 

/* priority order */
T63       
|
|--->T50
	  |-> T40
	  		|-> T30

Top of the nest <---> Bottom of the nest


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

After the donation, we reset the donated thread back to its original value so that the highest priority thread get to go first 

In waiting list, the priorities should be sorted in order.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

In this example, T63 need to wait for T50 and T50 need to wait for T40 and T40 need to wait for T30.
when T63 run, it tries to acquire lock, but then it check the lock holder whether it has a lower priority or not. 
if yes, it will check that T50 is waiting for other thread or not. 
We will keep checking until there is no thread waiting left, or until the thread that is waiting have a higher priority than the top of the nested thread. It will 
keep donating. 

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

when we lock_release, we will check if the thread have been donated or not. 
If it is, donated some priority 
the prev_priority number will be greater than zero if not it will be -1, after we reset it back to its original value, the prev_priority will be set back to -1 to show that it was not donated anymore.


---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

we set the interrupt off when we run thread_set_priority 


---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

int recent_cpu in the struct of thread to keep track of the recent cpu value of each thread 
global int load_avg, a system wide value use to calculate recent cpu

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0		0	0	0	63	61	59	  A
 4		4	0	0	62	61	59	  A
 8		0	0	0	61	61	59	  A
12		12	0	0	60	61	59	  B
16		12	4	0	60	60	59	  A
20		16	4	0	59	60	59	  B
24		16	8	0	59	59	59	  A
28		20	8	0	58	59	59	  B
32		20	12	0	58	58	59	  C
36		20	12	4	58	58	58    A

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

There might be some case where 2 priority numbers are the same. We will let the cpu with the lower nice number run first and then the recent_cpu will increase, which allow other CPU to run eventually

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

cost of scheduling outside the interrupt will affect performance beacuse the user cannot interact with the system scheduling inside. The interupt will allow the system to function The more we code outside the interrupt the slower the system become since it is lagging

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
No.
